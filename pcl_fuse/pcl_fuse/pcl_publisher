#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

import cv2
import numpy as np
from cv_bridge import CvBridge
from sensor_msgs.msg import PointCloud2, PointField
from sensor_msgs_py import point_cloud2
from std_msgs.msg import Header
import json

class StaticPCLPublisher(Node):
    def __init__(self):
        super().__init__('static_pcl_publisher')
        self.publisher_ = self.create_publisher(PointCloud2, '/fused_pointcloud', 1)
        self.timer = self.create_timer(2.0, self.publish_once)

        self.bridge = CvBridge()

        rgb_path = '/home/bham/Desktop/test_scene/rgb.png'
        depth_path = '/home/bham/Desktop/test_scene/depth.png'
        intrinsics_path = '/home/bham/Desktop/SAM-6D/SAM-6D/zed.json'

        bgr = cv2.imread(rgb_path, cv2.IMREAD_COLOR)
        rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB)
        depth = cv2.imread(depth_path, cv2.IMREAD_UNCHANGED)

        with open(intrinsics_path, 'r') as f:
            K = json.load(f)["cam_K"]
        fx, fy, cx, cy = K[0], K[4], K[2], K[5]

        depth = depth.astype(np.float32) / 1000.0
        h, w = depth.shape
        i, j = np.meshgrid(np.arange(w), np.arange(h), indexing='xy')

        z = depth
        x = (i - cx) * z / fx
        y = (j - cy) * z / fy

        points = np.stack((x, y, z), axis=-1).reshape(-1, 3)
        colors = rgb.reshape(-1, 3) / 255.0

        valid = (z > 0).reshape(-1)
        self.points = points[valid]
        self.colors = colors[valid]

    def publish_once(self):
        data = []
        for pt, color in zip(self.points, self.colors):
            r, g, b = (color * 255).astype(np.uint8)
            rgb_packed = int(r) << 16 | int(g) << 8 | int(b)
            data.append((*pt, rgb_packed))

        fields = [PointField(name='x', offset=0,  datatype=PointField.FLOAT32, count=1),
                  PointField(name='y', offset=4,  datatype=PointField.FLOAT32, count=1),
                  PointField(name='z', offset=8,  datatype=PointField.FLOAT32, count=1),
                  PointField(name='rgb', offset=12, datatype=PointField.UINT32, count=1),]

        header = Header()
        header.stamp = self.get_clock().now().to_msg()
        header.frame_id = 'zed2i_cam_left'

        pcl_msg = point_cloud2.create_cloud(header, fields, data)
        self.publisher_.publish(pcl_msg)
        self.get_logger().info('Published PointCloud2')

def main(args=None):
    rclpy.init(args=args)
    node = StaticPCLPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
