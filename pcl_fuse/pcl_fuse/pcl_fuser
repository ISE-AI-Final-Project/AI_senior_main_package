#!/usr/bin/env python3


import numpy as np
import open3d as o3d
import rclpy
import std_msgs.msg
import tf2_ros
from rclpy.node import Node
from sensor_msgs.msg import PointCloud2
from sensor_msgs_py import point_cloud2
from std_msgs.msg import Header, String

from main_pkg.utils import utils


class PointCloudFusionNode(Node):
    def __init__(self):
        super().__init__("pointcloud_fuser")

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.sub = self.create_subscription(
            PointCloud2,
            "/zed/zed_node/point_cloud/cloud_registered",
            self.pointcloud_callback,
            10,
        )

        self.fused_pcd = o3d.geometry.PointCloud()
        self.counter = 0
        self.max_scans = 3  # Number of scans to fuse

        self.sub_command = self.create_subscription(
            String, "/main/main_command", self.command_callback, 10
        )

        self.capture_pointcloud = False

    def command_callback(self, msg: String):
        recv_command = msg.data.strip().lower()
        self.get_logger().info(f"Received command: {recv_command}")

        if recv_command == "capture":
            self.capture_pointcloud = True

            self.get_logger().info("Ready to capture next pointcloud.")

    def pointcloud_callback(self, msg):

        if self.capture_pointcloud:
            try:
                tf = self.tf_buffer.lookup_transform(
                    "world",
                    msg.header.frame_id,
                    rclpy.time.Time(),
                    rclpy.duration.Duration(seconds=0.5),
                )
            except TransformException as ex:
                self.log(f"Could not get transform for point cloud: {ex}")
                return

            transformed_pointcloud, transformed_xyz = utils.transform_pointcloud(
                msg=msg, tf=tf, frame_id="world"
            )

            xyz = np.array(
                list(
                    point_cloud2.read_points(
                        transformed_pointcloud,
                        field_names=["x", "y", "z"],
                        skip_nans=False,
                    )
                )
            )

            pcd = o3d.geometry.PointCloud()
            pcd.points = o3d.utility.Vector3dVector(xyz)

            self.fused_pcd += pcd
            self.counter += 1
            self.get_logger().info(f"Fused scan {self.counter}/{self.max_scans}")

            if self.counter == self.max_scans:
                self.finalize()
                self.counter = 0

    def remove_inside_points(self, pcd: o3d.geometry.PointCloud, alpha=0.02):
        # Generate mesh using alpha shape
        mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_alpha_shape(pcd, alpha)
        mesh.compute_vertex_normals()

        # Convert mesh vertices to a surface point cloud
        surface_pts = mesh.vertices
        surface_pcd = o3d.geometry.PointCloud()
        surface_pcd.points = surface_pts

        return surface_pcd

    def finalize(self):
        # Optional: downsample and denoise
        self.fused_pcd = self.fused_pcd.voxel_down_sample(voxel_size=0.003)
        cl, ind = self.fused_pcd.remove_statistical_outlier(
            nb_neighbors=20, std_ratio=2.0
        )
        clean_pcd = self.fused_pcd.select_by_index(ind)

        surface_pcd = self.remove_inside_points(clean_pcd, alpha=0.02)

        # Save or visualize
        # o3d.io.write_point_cloud("merged_object.ply", clean_pcd)
        o3d.visualization.draw_geometries([surface_pcd])


def main(args=None):
    rclpy.init(args=args)
    node = PointCloudFusionNode()
    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == "__main__":
    main()
