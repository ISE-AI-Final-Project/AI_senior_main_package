#!/usr/bin/env python3

import os
import time

import rclpy
import trimesh
from geometry_msgs.msg import Point, Pose, PoseStamped
from moveit_msgs.msg import AttachedCollisionObject, CollisionObject, PlanningScene
from rcl_interfaces.srv import GetParameters
from rclpy.node import Node
from shape_msgs.msg import Mesh, MeshTriangle
from std_msgs.msg import Header
from std_srvs.srv import Trigger

from custom_srv_pkg.srv import TargetObjectSend


class STLCollisionPublisher(Node):
    def __init__(self):
        super().__init__("stl_collision_publisher")

        self.collision_pub_ = self.create_publisher(
            CollisionObject, "/collision_object", 10
        )
        self.attached_pub_ = self.create_publisher(
            AttachedCollisionObject, "/attached_collision_object", 10
        )

        # self.pose_subscription = self.create_subscription(
        #     PoseStamped, "/main/object_pose", self.pose_callback, 10
        # )
        self.make_stl_collision_server = self.create_service(TargetObjectSend, "make_stl_collision", self.make_stl_collision_callback)
        self.remove_service = self.create_service(
            Trigger, "add_collision_object", self.add_collision_callback
        )
        self.remove_service = self.create_service(
            Trigger, "remove_collision_object", self.remove_collision_callback
        )
        self.attach_service = self.create_service(
            Trigger, "attach_collision_object", self.attach_collision_callback
        )
        self.detach_service = self.create_service(
            Trigger, "detach_collision_object", self.detach_collision_callback
        )

        self.last_pose = None
        self.ros_mesh = None


    def load_and_convert_mesh(self, path):
        self.get_logger().info(f"Loading mesh from: {path}")
        mesh = trimesh.load_mesh(path)

        if isinstance(mesh, trimesh.Scene):
            mesh = trimesh.util.concatenate(mesh.dump())
        elif not isinstance(mesh, trimesh.Trimesh):
            mesh = mesh.dump().sum()

        mesh.apply_scale(0.001)
        self.get_logger().info(
            f"Mesh loaded with {len(mesh.vertices)} vertices and {len(mesh.faces)} faces"
        )

        ros_mesh = Mesh()
        for face in mesh.faces:
            ros_mesh.triangles.append(MeshTriangle(vertex_indices=face))
        for vertex in mesh.vertices:
            ros_mesh.vertices.append(Point(x=vertex[0], y=vertex[1], z=vertex[2]))
        return ros_mesh

    def make_stl_collision_callback(self, request:TargetObjectSend.Request, response:TargetObjectSend.Response):
        target_obj = request.target_obj
        dataset_path_prefix = request.dataset_path_prefix
        self.get_logger().info(f"Using object: {target_obj}")

        mesh_path = os.path.join(
            dataset_path_prefix, target_obj, f"{target_obj}_centered.stl"
        )
        self.ros_mesh = self.load_and_convert_mesh(mesh_path)

        self.last_pose = request.object_pose.pose
        self.get_logger().info(
            f"Pose stored from /main/object_pose: "
            f"({request.object_pose.pose.position.x}, {request.object_pose.pose.position.y}, {request.object_pose.pose.position.z})"
        )

        # Step 1: Remove existing object
        remove = CollisionObject()
        remove.id = "object"
        remove.header.frame_id = "world"
        remove.operation = CollisionObject.REMOVE
        self.collision_pub_.publish(remove)
        time.sleep(0.1)

        # Step 2: Add new object at received pose
        obj = CollisionObject()
        obj.id = "object"
        obj.header.frame_id = "world"
        obj.meshes = [self.ros_mesh]
        obj.mesh_poses = [request.object_pose.pose]
        obj.operation = CollisionObject.ADD
        self.collision_pub_.publish(obj)

        self.get_logger().info("Collision object updated in planning scene.")

        response.acknowledgement = True
        return response

    def add_collision_callback(self, request, response):
        # Step 1: Remove existing object
        remove = CollisionObject()
        remove.id = "object"
        remove.header.frame_id = "world"
        remove.operation = CollisionObject.REMOVE
        self.collision_pub_.publish(remove)
        time.sleep(0.1)

        # Step 2: Add new object at received pose
        obj = CollisionObject()
        obj.id = "object"
        obj.header.frame_id = "world"
        obj.meshes = [self.ros_mesh]
        obj.mesh_poses = [self.last_pose]
        obj.operation = CollisionObject.ADD
        self.collision_pub_.publish(obj)

        self.get_logger().info("Collision object updated in planning scene.")
        response.success = True
        response.message = "Object removed from planning scene"
        return response

    def remove_collision_callback(self, request, response):
        remove = CollisionObject()
        remove.id = "object"
        remove.header.frame_id = "world"
        remove.operation = CollisionObject.REMOVE
        self.collision_pub_.publish(remove)

        response.success = True
        response.message = "Object removed from planning scene"
        return response

    def attach_collision_callback(self, request, response):
        if self.last_pose is None:
            response.success = False
            response.message = "No pose to attach"
            return response

        remove = CollisionObject()
        remove.id = "object"
        remove.header.frame_id = "world"
        remove.operation = CollisionObject.REMOVE
        self.collision_pub_.publish(remove)
        time.sleep(0.2)

        attached = AttachedCollisionObject()
        attached.link_name = "robotiq_hande_end"
        attached.object.id = "object"
        attached.object.header.frame_id = "world"
        attached.object.meshes = [self.ros_mesh]
        attached.object.mesh_poses = [self.last_pose]
        attached.object.operation = CollisionObject.ADD
        attached.touch_links = [
            "robotiq_hande_left_finger_link",
            "robotiq_hande_right_finger_link",
        ]

        self.attached_pub_.publish(attached)

        response.success = True
        response.message = "Object attached to gripper"
        return response

    def detach_collision_callback(self, request, response):
        self.get_logger().info("Detaching and removing object from gripper and world")

        detach = AttachedCollisionObject()
        detach.link_name = "robotiq_hande_end"
        detach.object.id = "object"
        detach.object.header.frame_id = "world"
        detach.object.operation = CollisionObject.REMOVE
        self.attached_pub_.publish(detach)
        time.sleep(0.2)

        remove = CollisionObject()
        remove.id = "object"
        remove.header.frame_id = "world"
        remove.operation = CollisionObject.REMOVE
        self.collision_pub_.publish(remove)

        response.success = True
        response.message = "Object detached and removed"
        return response


def main():
    rclpy.init()
    node = STLCollisionPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Node interrupted by user (Ctrl+C)")
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()
